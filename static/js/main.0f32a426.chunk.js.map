{"version":3,"sources":["Calculator.js","serviceWorker.js","index.js"],"names":["Calculator","props","handleChange","event","setState","target","name","value","state","n_keys","includes","parseInt","errorMsg","valueIndex","indexOf","numerator_res","num_records","records","d_keys","parseFloat","valueIndex2","denominator_res","den_records","final_answer","calculate","numerator_entry","denominator_entry","fetch","then","response","json","data","key","push","this","className","placeholder","onChange","disabled","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0f32a426.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './Calculator.css';\r\n\r\nclass Calculator extends Component {\r\n    constructor (props) {\r\n        super(props)\r\n\r\n        this.state = {\r\n            num_records: {},\r\n            den_records: {},\r\n            numerator_entry: null,\r\n            denominator_entry: null,\r\n            n_keys: [],\r\n            d_keys: [],\r\n            numerator_res: \"\",\r\n            denominator_res: \"\",\r\n            final_answer: \"\"\r\n        }\r\n    }\r\n\r\n    componentDidMount () {\r\n        fetch(\"https://med.netsermon.com/api/numerator/read.php\")\r\n            .then(response => response.json())\r\n            .then(data => {\r\n                this.setState({\r\n                    num_records: data\r\n                });\r\n                for (var key in this.state.num_records.records) {\r\n                    this.state.n_keys.push(parseInt(this.state.num_records.records[key].key))        \r\n                }\r\n            });\r\n\r\n        fetch(\"https://med.netsermon.com/api/denominator/read.php\")\r\n            .then(response => response.json())\r\n            .then (data => {\r\n                this.setState({\r\n                    den_records: data\r\n                });\r\n\r\n                for (var key in this.state.den_records.records) {\r\n                    this.state.d_keys.push(parseInt(this.state.den_records.records[key].key))        \r\n                }\r\n            }\r\n            );\r\n        \r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        });\r\n        if (event.target.name === \"numerator_entry\") {\r\n            if (this.state.n_keys.includes(parseInt(event.target.value))) {\r\n                this.setState({\r\n                    errorMsg: \"\"\r\n                })\r\n                var valueIndex = this.state.n_keys.indexOf(parseInt(event.target.value))\r\n                this.setState({\r\n                    numerator_res: this.state.num_records.records[valueIndex].value\r\n                });\r\n            } else {\r\n                if (event.target.value !== \"\") {\r\n                    this.setState({\r\n                        numerator_res: \"\",\r\n                        errorMsg: \"Numerator key does not exist\"\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        numerator_res: \"\",\r\n                        errorMsg: \"\"\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        if (event.target.name === \"denominator_entry\") {\r\n            if (this.state.d_keys.includes(parseFloat(event.target.value))) {\r\n                this.setState({\r\n                    errorMsg: \"\"\r\n                })\r\n                var valueIndex2 = this.state.d_keys.indexOf(parseInt(event.target.value))\r\n                this.setState({\r\n                    denominator_res: this.state.den_records.records[valueIndex2].value\r\n                });\r\n            } else {\r\n                if (event.target.value !== \"\") {\r\n                    this.setState({\r\n                        denominator_res: \"\",\r\n                        errorMsg: \"Denominator key does not exist\"\r\n                    })\r\n                } else {\r\n                    this.setState({\r\n                        denominator_res: \"\",\r\n                        errorMsg: \"\"\r\n                    })\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.state.numerator_res === \"\" || this.state.denominator_res === \"\") {\r\n            this.setState({\r\n                final_answer: \"\"\r\n            })\r\n        }\r\n    }\r\n\r\n    calculate = () => {\r\n        this.setState({\r\n            final_answer: this.state.numerator_res / this.state.denominator_res\r\n        })\r\n    }\r\n\r\n\r\n    render() {\r\n        const {numerator_res, denominator_res} = this.state;\r\n        return (\r\n            <div className=\"container-fluid p-4 box-center\">\r\n                <h3 className=\"text-center\">Oxygen Flow Calculator</h3>\r\n                <div className=\"row\">\r\n                    <p className=\"text-danger pl-3\">\r\n                        {\r\n                            this.state.errorMsg\r\n                        }\r\n                    </p>\r\n                </div>\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">Numerator: </div>\r\n                    <div className=\"col-4\">\r\n                        <div className=\"form-group\">\r\n                            <label className=\"block\">1 A</label>\r\n                            <input className=\"form-control-sm\" name=\"numerator_entry\" placeholder=\"Enter first value\" onChange={this.handleChange}></input>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                        <div className=\"form-group\">\r\n                            <label className=\"block\">1 B</label>\r\n                            <input className=\"form-control-sm\" name=\"numerator_res\" value={this.state.numerator_res} disabled></input>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-2\">Denominator: </div>\r\n                    <div className=\"col-4\">\r\n                        <div className=\"form-group\">\r\n                            <label className=\"block\">2 A</label>\r\n                            <input className=\"form-control-sm\" name=\"denominator_entry\" placeholder=\"Enter second value\" onChange={this.handleChange}></input>\r\n                        </div>\r\n                    </div>\r\n                    <div className=\"col-4\">\r\n                        <div className=\"form-group\">\r\n                            <label className=\"block\">2 B</label>\r\n                            <input className=\"form-control-sm\" name=\"denominator_res\" value={this.state.denominator_res} disabled></input>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div className=\"row\">\r\n                    <div className=\"col-6\">\r\n                        <button disabled={\r\n                            (numerator_res === \"\" || denominator_res === \"\") ? true : false\r\n                        } className=\"btn btn-success\" onClick={this.calculate}>Calculate</button>\r\n                    </div>\r\n                    <div className=\"col-6\">\r\n                        <input className=\"form-control-sm\" name=\"final_anwer\" value={this.state.final_answer} disabled></input>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Calculator;\r\n\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Calculator from './Calculator';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Calculator/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}